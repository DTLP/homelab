---
- name: Setup Proxmox Cluster
  hosts: pve_nodes
  become: true
  vars:
    root_password: "{{ lookup('file', 'secrets/root_password') }}"
    ansible_ssh_pass: "{{ root_password }}"

  tasks:
    - name: Setup cluster on main node
      shell: "pvecm create {{ cluster_name }}"
      when: ansible_host == main_node_ip
      register: create_cluster_result
      changed_when: "'already exists' not in create_cluster_result.stderr"

    - name: Comment out Enterprise repo ceph.list
      lineinfile:
        path: /etc/apt/sources.list.d/ceph.list
        regexp: '^'
        line: '#'
        backrefs: yes
      ignore_errors: yes

    - name: Comment out Enterprise repo in pve-enterprise.list
      lineinfile:
        path: /etc/apt/sources.list.d/pve-enterprise.list
        regexp: '^'
        line: '#'
        backrefs: yes
      ignore_errors: yes

    - name: Add the community repo to pve-enterprise.list
      lineinfile:
        path: /etc/apt/sources.list.d/pve-enterprise.list
        line: 'deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription'
        create: yes
        state: present

    - name: Update the apt cache
      apt:
        update_cache: yes

    - name: Ensure `pexpect` is installed
      apt:
        name: python3-pexpect
        state: present
      when: ansible_host != main_node_ip

    - name: Join other nodes to the cluster using root password
      expect:
        command: "pvecm add {{ main_node_ip }}"
        responses:
          (?m)^Please enter superuser .* password for .*: "{{ root_password }}"
          (?m)^Are you sure you want to continue connecting: "yes"
      when: ansible_host != main_node_ip
      register: join_cluster_result
      changed_when: "'already exists' not in join_cluster_result.stdout"

    - name: Display cluster status
      shell: "pvecm status"
      register: cluster_status
      changed_when: false

    - name: Print cluster status
      debug:
        var: cluster_status.stdout
