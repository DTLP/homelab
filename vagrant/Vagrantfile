# Original Vagrantfile from https://github.com/arturscheiner/kuberverse

BOX_IMAGE = "ubuntu/jammy64"
COMMON_BOX_IMAGE = "common-box"
KUBE_VERSION = "1.29"
CONTAINER_RUNTIME = "containerd"

CNI_PROVIDER = "calico"

MASTER_COUNT = 1
WORKER_COUNT = 2

SCALER_MEMORY = 512
MASTER_MEMORY = 2048
WORKER_MEMORY = 1024

# Change these values if you wish to play with the
# networking settings of your cluster 
LAB_NETWORK = "10.0.0.0"

# This value changes the intra-pod network
POD_CIDR = "192.168.0.0/24"

MSG = "Kubernetes Cluster Lab"

################################################################################

def colorize(text, color_code)
  "\e[#{color_code}m#{text}\e[0m"
end

def red(text);       colorize(text, 31);  end
def green(text);     colorize(text, 32);  end
def yellow(text);    colorize(text, 33);  end
def blue(text);      colorize(text, 34);  end

class String
  def black;         "\e[30m#{self}\e[0m" end
  def red;           "\e[31m#{self}\e[0m" end
  def green;         "\e[32m#{self}\e[0m" end
  def brown;         "\e[33m#{self}\e[0m" end
  def blue;          "\e[34m#{self}\e[0m" end
  def magenta;       "\e[35m#{self}\e[0m" end
  def cyan;          "\e[36m#{self}\e[0m" end
  def gray;          "\e[37m#{self}\e[0m" end

  def bg_black;      "\e[40m#{self}\e[0m" end
  def bg_red;        "\e[41m#{self}\e[0m" end
  def bg_green;      "\e[42m#{self}\e[0m" end
  def bg_brown;      "\e[43m#{self}\e[0m" end
  def bg_blue;       "\e[44m#{self}\e[0m" end
  def bg_magenta;    "\e[45m#{self}\e[0m" end
  def bg_cyan;       "\e[46m#{self}\e[0m" end
  def bg_gray;       "\e[47m#{self}\e[0m" end

  def bold;          "\e[1m#{self}\e[22m" end
  def italic;        "\e[3m#{self}\e[23m" end
  def underline;     "\e[4m#{self}\e[24m" end
  def blink;         "\e[5m#{self}\e[25m" end
  def reverse_color; "\e[7m#{self}\e[27m" end
end

class Lab
  def initialize
    puts "\n********** #{yellow(MSG)} **********"
    puts "Cluster settings:"
    puts "---- k8s version:          #{yellow(KUBE_VERSION)}"
    puts "---- Container runtime is: #{yellow(CONTAINER_RUNTIME)}"
    puts "---- CNI provider is:      #{yellow(CNI_PROVIDER)}"
    puts "---- Master Nodes count:   #{yellow(MASTER_COUNT)}"
    puts "---- Worker Nodes count:   #{yellow(WORKER_COUNT)}"
  end
  
  def defineIp(type,i,net)
    case type
    when "master"
      return net.split('.')[0..-2].join('.') + ".#{i + 10}"
    when "worker"
      return net.split('.')[0..-2].join('.') + ".#{i + 20}"
    when "scaler"
      return net.split('.')[0..-2].join('.') + ".#{i + 50}"
    end
  end

  def createScaler(config)
    i = 0
    scalerIp = self.defineIp("scaler",i,LAB_NETWORK)

    if MASTER_COUNT != 1
      puts "---- Scaler Nodes count:   #{yellow("1")}"
    end

    puts "Node IP Addresses:"

    if MASTER_COUNT != 1
      puts "---- scaler-#{i}              #{yellow(scalerIp)}"
    end

    masterIps = Array[]

    (0..MASTER_COUNT-1).each do |m|
      masterIps.push(self.defineIp("master",m,LAB_NETWORK))
    end

    config.vm.define "scaler-#{i}" do |scaler|    
      scaler.vm.box = BOX_IMAGE
      scaler.vm.hostname = "scaler-#{i}"
      scaler.vm.network :private_network, ip: scalerIp, nic_type: "virtio"
      scaler.vm.network "forwarded_port", guest: 6443, host: 6443

      scaler.vm.provider :virtualbox do |vb|
        vb.customize ["modifyvm", :id, "--cpus", 2, "--nictype1", "virtio"]
        vb.memory = SCALER_MEMORY
      end

      scaler.vm.provider "vmware_desktop" do |v|
        v.vmx["memsize"] = SCALER_MEMORY
        v.vmx["numvcpus"] = "2"
      end

      $script = <<-SCRIPT

        echo "#{scalerIp} scaler.lab.local scaler.local master" >> /vagrant/hosts.out

        /vagrant/scripts/scaler.sh #{scalerIp} "#{masterIps}"

      SCRIPT
      scaler.vm.provision "shell", inline: $script, keep_color: true
    end
  end

  def createMaster(config)
    (0..MASTER_COUNT-1).each do |i|
      masterIp = self.defineIp("master",i,LAB_NETWORK)

      puts "---- master-#{i}              #{yellow(masterIp)}"
      config.vm.define "master-#{i}" do |master|
        master.vm.box = COMMON_BOX_IMAGE
        master.vm.hostname = "master-#{i}"
        master.vm.network :private_network, ip: masterIp, nic_type: "virtio"
        
        $script = ""

        if MASTER_COUNT == 1
          master.vm.network "forwarded_port", guest: 6443, host: 6443
          $script = <<-SCRIPT
            echo "#{masterIp} master.lab.local master.local master scaler.lab.local" >> /vagrant/hosts.out
          SCRIPT
        end

        master.vm.provider :virtualbox do |vb|
          vb.customize ["modifyvm", :id, "--cpus", 2, "--nictype1", "virtio"]
          vb.memory = MASTER_MEMORY
        end

        master.vm.provider "vmware_desktop" do |v|
          v.vmx["memsize"] = MASTER_MEMORY
          v.vmx["numvcpus"] = "2"
        end

        $script = $script + <<-SCRIPT

          /vagrant/scripts/master.sh #{i} #{POD_CIDR} #{masterIp} #{MASTER_COUNT == 1 ? "single" : "multi"}

        SCRIPT
        master.vm.provision "shell", inline: $script, keep_color: true
      end
    end 
  end

  def createWorker(config)
    (0..WORKER_COUNT-1).each do |i|
      workerIp = self.defineIp("worker",i,LAB_NETWORK)

      puts "---- worker-#{i}              #{yellow(workerIp)}"
      config.vm.define "worker-#{i}" do |worker|
        worker.vm.box = COMMON_BOX_IMAGE
        worker.vm.hostname = "worker-#{i}"
        worker.vm.network :private_network, ip: workerIp, nic_type: "virtio"
        worker.vm.provider :virtualbox do |vb|
          vb.customize ["modifyvm", :id, "--cpus", 2, "--nictype1", "virtio"]
          vb.memory = WORKER_MEMORY
        end

        worker.vm.provider "vmware_desktop" do |v|
          v.vmx["memsize"] = WORKER_MEMORY
          v.vmx["numvcpus"] = "2"
        end

        $script = <<-SCRIPT

          /vagrant/scripts/worker.sh #{workerIp} #{MASTER_COUNT == 1 ? "single" : "multi"}

        SCRIPT
        worker.vm.provision "shell", inline: $script, keep_color: true
      end
    end
  end

  def creatCommonBox(config)

    config.vm.define "common-box" do |box|
      box.vm.box = BOX_IMAGE
      box.vm.hostname = "common-box"
      box.vm.provision "shell", inline: "sudo apt-get update"
      box.vm.network :private_network, ip: "10.0.0.31", nic_type: "virtio"
      box.vm.provider :virtualbox do |vb|
        vb.customize ["modifyvm", :id, "--cpus", 2, "--nictype1", "virtio"]
        vb.memory = WORKER_MEMORY
      end

      box.vm.provider "vmware_desktop" do |v|
        v.vmx["memsize"] = WORKER_MEMORY
        v.vmx["numvcpus"] = "2"
      end

      $script = <<-SCRIPT

        /vagrant/scripts/common.sh #{KUBE_VERSION}

      SCRIPT
      box.vm.provision "shell", inline: $script, keep_color: true
    end
  end
end

Vagrant.configure("2") do |config|

  config.vm.provider "virtualbox"

  lab = Lab.new()

  if ARGV[0] == "up" or ARGV[0] == "status" or ARGV[0] == "destroy" or ARGV[0] == "ssh" or ARGV[0] == "package"
    
    if MASTER_COUNT >= 2
      lab.createScaler(config)
    end

    if ARGV[1] == "common-box"
      lab.creatCommonBox(config)
    else
      lab.createMaster(config)
      lab.createWorker(config)
    end

    config.vm.provision "shell",
     run: "always",
     inline: "swapoff -a"
  end
end